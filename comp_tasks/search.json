[
  {
    "objectID": "compulsoryTask2/index.html#addressing-causality",
    "href": "compulsoryTask2/index.html#addressing-causality",
    "title": "Data Integration",
    "section": "Addressing causality",
    "text": "Addressing causality\n\nKnowing the types of data that Ochre generates in cells, tissues, and livers, share your vision for how to run a screen to predict which genes in hepatocytes drive cirrhosis.\n\nAt Ochre bio, breadth of data is available in multi-scale and from multi-origin format ranging from,\n\nGenome wide genetic screens using RNAi with transcriptomic phenotypic data\nSingle Cell RNAseq data on cellular and tissue models\nHistological images from H&E staining\nSpatial transcriptomics in parallel to histology to offer multi-omic insights\nFinally, validation at multi-level ranging from cellular, tissue organoids levels to liver perfusion model.\n\nThis helps in not only investigating liver disease phenotype from a bottom-up approach but also to generate breadth of knowledgebase that covers range of complexity mimicking as closely possible to clinical and physiological conditions.\n\nPossible approaches to disentangle the causation from correlation\n\nTraditional methods of functional pathway-based studies\nFunctional studies from these multi-scale data of histology to spatial transcriptomics is already very powerful. Having spatial resolution, with a tissue model that showcases different stages of disease up until cirrhosis, the single cell RNAseq analysis already can help in identifying colocalised functional readouts that can be uniquely mapped to the disease phenotype.\nAlthough this only helps us indetify the signature markers that differentiates different disease states.\n\n\nLongitudinal studies\nHaving the organ model getting sequenced and producing a clinical level readout provides paramount insights into the disease progression and opportunity to identify the regulatory changes responsible for disease progression. Various developmental studies make use of single cell RNAseq data to decipher the regulatory genetic drivers responsible at every key stages. This is achieved with the help of analysis of RNA velocity driven trajectory development (pseudo-time prediction for cellular stage) and with identification of differential gene expression along this trajectory. This very concept can be employed with our organ model to decipher the genetic drivers which then can be pursued using RNAi based screens to get further insights.\n\n\nMulti-omic integration\nModern machine learning based approaches can be employed to integrate the multi-omic readouts from the tissue section culturing data. Availability of clinical, histological, sequencing and perturbation studies can be integrated using logistic and linear regression based models (as per the type of the input data) to query clusters of covariate features from these individual data sources. Packages like mixOmics already offers most of the mechanics required for such an analysis. It can be further tailored to interact with the input data structure from Ochre bio’s multi-omic readouts. Additionally data from the longitudinal studies can also be evaluated with the further extension methods such as timeOmics. This will help as a second layer of validation of the genetic drivers predicted from single cell trajectory analysis methods discussed above."
  },
  {
    "objectID": "compulsoryTask1/Summary/index.html#asks",
    "href": "compulsoryTask1/Summary/index.html#asks",
    "title": "Summary",
    "section": "Asks:",
    "text": "Asks:\n\n\nIdentify and discuss at least three technical concerns present within the experimental data using visualisations. What do these concerns suggest about the quality of the data?\n\n\n\nMultiple plates have missing perturbations in at least one replicate. This will reduce the statistical predictions of their effect.\nPooled experiment for 3rd replicate has combinatorial perturbations and hence will be treated as unique experiment and will not be considered as an additional replicate\nOne experiment has ambiguous metadata with multiple plates showing the same replicate number (plate_id).\nExperiment spanning multiple dates or batches\nFew perturbations were evaluated on different plates and hence will have different batch and/or dates\nNTC/control markers are placed at the same location across all plates and the perturbations were placed at same location across all replicates.\n\n\n\nPropose methods to address the identified technical concerns, discussing the advantages and disadvantages of each approach. Reflect on how the experimental design could have been improved to mitigate these issues from the outset.\n\n\n\n\nLower number of replicates &lt; 3 for perturbations can not be statistically evaluated for genome levels transcriptomic analysis and such experiments needs to be repeated\nAmbiguity in the metadata raises concerns of the quality and validity of the sample. It will be wise to repeat such experiment unless its a precious or limited sample. In such cases, looking at the unsupervised clustering methods can assist in indentifying the outlier sample/plate.\nBatches or multiple dates for experiments can be addressed by using statistical models where the effect of such variables can be regressed out, provided that they are not linearly dependant on any other experimental variable such siRNA plate id. It is a better strategy to span the replicates for all experiments along with batch or dates so that the effect of bach/dates can be regressed out with minimal effect on covariates towards the experimental variable.\nPositional effect (wells) across plate is another factor and it is better to randomly distribute perturbations and controls across replicates for all plates.\n\n\n\nBased on the expression levels of the 10 highly expressed genes, provide evidence supporting the identification of the possible cell type used in the RNAi screen. Describe common methodologies for analysing how perturbations may have altered cellular pathways.\n\n\n\nThere are various automated/manual cell annotation web resources. Some of which are linked in the QC of counts data report under cell annotation section. Although most of these tools are targeted for single cell data, using differential gene signature these can be used to annotated homogeneous cell culture samples. However for hetergenous cell type samples, methods to deconvolve and annotate are also available (eg. CIBERSORTx) that offer score/statistics for annotation.\nCellular pathway analysis as an effect of perturbation can be best studied with methods such as Gene Set Enrichment ANalysis (GSEA) or Over Representation Analysis (ORA)\nIt would also be interesting to look at combinatorial perturbation effects equivalent of synthetic lethality as was attempted in replicate 3 for most of the plates There is likely cis-regulatory effects that can be activated with such combinatorial targeting.\n\n\n\nDiscuss the different types of genetic screens, including but not limited to RNAi screens. What are the strengths and weaknesses of each type? How do these methods compare in terms of their applicability to different research questions?\n\n\n\nEssentially genetic screens can be divided in 2 categories. Forward screen and Reverse genetic screens.\n\nForward screens:\n\nInducing random mutations with chemical mutagens or transposons\nUnbiased approach, helps in discovering novel gene functions or pathways\nVersatile for application to various organisms\nComplex for interpretation and analysis for mapping of mutations\n\nReverse screens:\n\nThese are targeted screens of known genes\nUseful for functional analysis and phenotyping\nCompensatory effect by alternative genes is possible\nRNAi based screens:\n\nUsing siRNA or shRNA based knockdown of gene\nHigh-throughput and cost-effective in comparison to other methods for genome scale screening\nOff-target effects from binding to other genes or from miRNA equivalent unintented regulatory effects or incomplete knockdown complicates interpretation/analysis\nVariable efficiency depending on cell types or organisms\n\nCRISPR based screens:\n\nUsing guide RNA and cas9 dependent knockout, activations or repressions\nHigh-precision and efficiency than other methods\nVersatile to target non-coding regulatory regions as well\nDependent on Cas9 expression and hence can vary efficiency across cell types and organisms"
  },
  {
    "objectID": "compulsoryTask1/QC_data/index.html#introduction",
    "href": "compulsoryTask1/QC_data/index.html#introduction",
    "title": "QC for metadata",
    "section": "Introduction",
    "text": "Introduction\nIn order to understand how the experiements are performed, and how to handle the data for biological interpretation, we will need to look at metadata separately from the counts data. This will help us identify which samples can be analysed together and how the experimental strategy is.\nWe will read in both counts and metadata files to evaluate them separately.\n\n\nCode\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(kableExtra)\n\nallCounts = read_parquet(file.path(inputs.dir, 'counts.parquet'))\nmetadata = read_csv(file.path(inputs.dir, 'metadata.csv'), col_names = TRUE) %&gt;% \n  separate(cell_plate_id, into = c(\"cell_plate_id\", \"repl\"), sep = \"_rep\")\n\n\n\n\nCode\nplotPlate &lt;- function(data, columnName) {\n  data &lt;- data %&gt;%\n    separate(well, into = c(\"X\", \"Y\"),\n             sep = \"(?&lt;=[A-Za-z])(?=[0-9])\"\n    ) %&gt;%\n    mutate(Y = as.integer(Y)) %&gt;%\n    arrange(desc(X),Y) %&gt;% \n    mutate(X = factor(X, levels = LETTERS[8:1]),\n           Y = factor(Y, levels = seq(1,12,1)))\n  g &lt;- ggplot(data, aes(factor(X),Y, fill = data[,columnName])) +\n    geom_tile() + \n    coord_flip() + \n    theme_clean(panel.grid.major = FALSE, axis = TRUE) +\n    labs(fill = columnName, x = \"\", y = \"\")\n  \n  return(g)\n}\n\n\n\nUnderstanding the metadata of all experiments\n\n\n\n\n\n\n\n\n\n\n\n\nSample_ID counts across plate from atlas\nWhen I looked at the counts of unique sample_id analysed in each well, there seem to be discrepancies in well usage across the plate ranging from 136-141\n\n\nCode\ndata = metadata %&gt;%\n  select(well) %&gt;%\n  table() %&gt;% as.data.frame()\nplotPlate(data, \"Freq\") + theme(axis.line = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nReplicates per plate\nAbove plots prompted me to look at the distribution of relpicates per plate.\n\n\nCode\ndata = metadata %&gt;% \n  select(siRNA_plate_id, repl) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[1:3]) +\n  theme_clean() +\n  xlab(\"No. of relpicates\")\n\n\n\n\n\n\n\n\n\nIt is not a surprise, I guess, that we have most plates with only 2 replicates (n = 50), as the 3rd replicate (n = 25) is made from pool of consecutive plates. There are some plates which has been processed with 3 replicates (n = 5) as well.\n\n123\n\n\n\n\nCode\nrepl_data &lt;- data %&gt;% \n  group_nest(Freq) %&gt;% \n  deframe()\n\nknitr::kable(repl_data$`1`) %&gt;% \n  scroll_box(width = \"500px\", height = \"200px\")\n\n\n\n\n\n\nsiRNA_plate_id\n\n\n\n\nLP_144757_Plate_11_LP_144757_Plate_12\n\n\nLP_144757_Plate_13_LP_144757_Plate_14\n\n\nLP_144757_Plate_15_LP_144757_Plate_16\n\n\nLP_144757_Plate_17_LP_144757_Plate_18\n\n\nLP_144757_Plate_19_LP_144757_Plate_20\n\n\nLP_144757_Plate_1_LP_144757_Plate_2\n\n\nLP_144757_Plate_21_LP_144757_Plate_22\n\n\nLP_144757_Plate_23_LP_144757_Plate_24\n\n\nLP_144757_Plate_25_LP_144757_Plate_26\n\n\nLP_144757_Plate_27_LP_144757_Plate_28\n\n\nLP_144757_Plate_29_LP_144757_Plate_30\n\n\nLP_144757_Plate_31_LP_144757_Plate_32\n\n\nLP_144757_Plate_33_LP_144757_Plate_34\n\n\nLP_144757_Plate_35_LP_144757_Plate_36\n\n\nLP_144757_Plate_37_LP_144757_Plate_38\n\n\nLP_144757_Plate_39_LP_144757_Plate_40\n\n\nLP_144757_Plate_3_LP_144757_Plate_4\n\n\nLP_144757_Plate_41_LP_144757_Plate_42\n\n\nLP_144757_Plate_43_LP_144757_Plate_44\n\n\nLP_144757_Plate_45_LP_144757_Plate_46\n\n\nLP_144757_Plate_47_LP_144757_Plate_48\n\n\nLP_144757_Plate_49_LP_144757_Plate_50\n\n\nLP_144757_Plate_5_LP_144757_Plate_6\n\n\nLP_144757_Plate_7_LP_144757_Plate_8\n\n\nLP_144757_Plate_9_LP_144757_Plate_10\n\n\n\n\n\n\n\n\n\n\n\nCode\nknitr::kable(repl_data$`2`) %&gt;% \n  scroll_box(width = \"500px\", height = \"200px\")\n\n\n\n\n\n\nsiRNA_plate_id\n\n\n\n\nLP_144757_Plate_1\n\n\nLP_144757_Plate_10\n\n\nLP_144757_Plate_11\n\n\nLP_144757_Plate_12\n\n\nLP_144757_Plate_13\n\n\nLP_144757_Plate_14\n\n\nLP_144757_Plate_15\n\n\nLP_144757_Plate_16\n\n\nLP_144757_Plate_17\n\n\nLP_144757_Plate_18\n\n\nLP_144757_Plate_19\n\n\nLP_144757_Plate_2\n\n\nLP_144757_Plate_20\n\n\nLP_144757_Plate_21\n\n\nLP_144757_Plate_22\n\n\nLP_144757_Plate_23\n\n\nLP_144757_Plate_24\n\n\nLP_144757_Plate_25\n\n\nLP_144757_Plate_26\n\n\nLP_144757_Plate_27\n\n\nLP_144757_Plate_28\n\n\nLP_144757_Plate_29\n\n\nLP_144757_Plate_3\n\n\nLP_144757_Plate_30\n\n\nLP_144757_Plate_31\n\n\nLP_144757_Plate_32\n\n\nLP_144757_Plate_33\n\n\nLP_144757_Plate_34\n\n\nLP_144757_Plate_35\n\n\nLP_144757_Plate_36\n\n\nLP_144757_Plate_37\n\n\nLP_144757_Plate_38\n\n\nLP_144757_Plate_39\n\n\nLP_144757_Plate_4\n\n\nLP_144757_Plate_40\n\n\nLP_144757_Plate_41\n\n\nLP_144757_Plate_42\n\n\nLP_144757_Plate_43\n\n\nLP_144757_Plate_44\n\n\nLP_144757_Plate_45\n\n\nLP_144757_Plate_46\n\n\nLP_144757_Plate_47\n\n\nLP_144757_Plate_48\n\n\nLP_144757_Plate_49\n\n\nLP_144757_Plate_5\n\n\nLP_144757_Plate_50\n\n\nLP_144757_Plate_6\n\n\nLP_144757_Plate_7\n\n\nLP_144757_Plate_8\n\n\nLP_144757_Plate_9\n\n\n\n\n\n\n\n\n\n\n\nCode\nknitr::kable(repl_data$`3`) %&gt;% \n  scroll_box(width = \"500px\", height = \"200px\")\n\n\n\n\n\n\nsiRNA_plate_id\n\n\n\n\nLP_142740\n\n\nLP_142744\n\n\nLP_142750\n\n\nexp1_Plate_1\n\n\nexp2_Plate_1\n\n\n\n\n\n\n\n\n\n\n\n\nWells usage per plate from each replicate group &gt; 1\nLet’s look at how each plate has wells usage from plates that were processed with minimum 2 replicates\n\n23\n\n\nFollowing plates have missing data points. LP_144757_Plate_50 has F, G and H rows completely removed\n\nLP_144757_Plate_33LP_144757_Plate_39LP_144757_Plate_50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFollowing plates have missing data points. exp1_Plate_1 has columns 1 - 4 completely removed from replicate 2 and 3. Closer inspection for the same plate shows that the replicate 3 has been imputed twice and hence the plot show replicate frequency as 4 rather than max value of 3.\n\nexp1_Plate_1exp2_Plate_1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlates with gaps in well usage dictates that the relevant perturbations will be affected in terms of their replicate structure. This affects in creating statistical models where every sample set is expected to follow equal number of sample size (replicates) and normal distribution of data points.\nHaving low number of replicates in our experiment, this assumption will be further tested and affects prediction efficacy.\n\n\n\n\nExperiment dates\nLooking at the date column with multiple entries, it will be good to look at date of experiments across replicates per plate in each replicate group\nIt is also important to look at each perturbations experiments if they span on different dates.\n\n123\n\n\nAs expected every single plate has single date entry.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, date) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per plate\")\n\n\n\n\n\n\n\n\n\nAll of the perturbations in this replicate group has only been evaluated once.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, date) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\nit’s good to see that every single plate across both replicates has single date entry.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, date) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per plate\")\n\n\n\n\n\n\n\n\n\nAlso most of the perturbations in this replicate group has only been evaluated once per date except 15 perturbations.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, date) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"No. of Perturbations spanning more than 1 date:\\n\", length(data$perturbation_id[data$Freq&gt;1]))\n## No. of Perturbations spanning more than 1 date:\n##  15\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\nit’s good to see that every single plate across all replicates has single date entry.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, date) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per plate\")\n\n\n\n\n\n\n\n\n\nAll of the perturbations in this replicate group has only been evaluated once per date.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, date) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of dates entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent experiment dates could lead to systematic affects across the entire plate on account of various sources of variations.\n\n\n\n\nExperiment batch\nLooking at the batch column with multiple entries, it will be also good to look at batch of experiments across replicates per plate in each replicate group\nIt is also important to look at each perturbations experiments if they span on different batches.\n\n123\n\n\nAs expected every single plate has single batch entry.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, sequencing_batch_id) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Experiment spanning number of batches per plate\")\n\n\n\n\n\n\n\n\n\nAll of the perturbations in this replicate group has only been evaluated once.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, sequencing_batch_id) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of batches entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\nExcept for 5 plates, every other plate has single batch id LP_144757_Plate_17, LP_144757_Plate_29, LP_144757_Plate_33, LP_144757_Plate_34, LP_144757_Plate_5\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, sequencing_batch_id) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"Plates spanning more than 1 batch:\\n\", paste(data$siRNA_plate_id[data$Freq&gt;1], collapse = \", \"))\n## Plates spanning more than 1 batch:\n##  LP_144757_Plate_17, LP_144757_Plate_29, LP_144757_Plate_33, LP_144757_Plate_34, LP_144757_Plate_5\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Experiment spanning number of batches per plate\")\n\n\n\n\n\n\n\n\n\nAlso most of the perturbations in this replicate group has only been evaluated once per batch id. Although 186 perturbations were present across 2 batches\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, sequencing_batch_id) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"No. of Perturbations spanning more than 1 batch:\\n\", length(data$perturbation_id[data$Freq&gt;1]))\n## No. of Perturbations spanning more than 1 batch:\n##  186\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of batches entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\nExcept for exp1_Plate_1 plate, every other plate has single batch id\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  select(siRNA_plate_id, sequencing_batch_id) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"Plates spanning more than 1 batch:\\n\", paste(data$siRNA_plate_id[data$Freq&gt;1], collapse = \", \"))\n## Plates spanning more than 1 batch:\n##  exp1_Plate_1\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Experiment spanning number of batches per plate\")\n\n\n\n\n\n\n\n\n\nAll of the perturbations in this replicate group has only been evaluated once per batch.\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, sequencing_batch_id) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"No. of Perturbations spanning more than 1 batch:\\n\", length(data$perturbation_id[data$Freq&gt;1]))\n## No. of Perturbations spanning more than 1 batch:\n##  0\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of batches entry per perturbation id\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSimilar to dates, different experimental batch could lead to systematic affects across the entire batch on account of various sources of variations.\n\n\n\n\nPerturbations across plates\nLooking at the perturbations across batches, it would be useful to also look for perturbations distribution across plates. We can evaluate if the perturbations are uniquely represented by a single plate or not.\n\n123\n\n\nAll perturbations are present only on individual plate in this replicate group\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, siRNA_plate_id, repl) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of replicates for perturbation per plate\")\n\n\n\n\n\n\n\n\n\n\n\nThere are 21 perturbations with more than 1 plate distribution, also 5 perturbations have less than 2 expected replicates per plate\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, siRNA_plate_id, repl) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"No. of Perturbations replicates across plates more than 2:\\n\", length(data$perturbation_id[data$Freq&gt;2]))\n## No. of Perturbations replicates across plates more than 2:\n##  21\ncat(\"No. of Perturbations replicates across plates less than 2:\\n\", length(data$perturbation_id[data$Freq&lt;2]))\n## No. of Perturbations replicates across plates less than 2:\n##  5\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of replicates for perturbation per plate\")\n\n\n\n\n\n\n\n\n\n\n\nThere are 3 perturbations with only 2 replicates and 2 perturbations with less than 2 expected replicates per plate\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  select(perturbation_id, siRNA_plate_id, repl) %&gt;% \n  filter(!(perturbation_id %in% \"NTC\")) %&gt;% \n  unique() %&gt;% \n  group_by(perturbation_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\")\n\ncat(\"No. of Perturbations replicates across plates equal to 2:\\n\", length(data$perturbation_id[data$Freq==2]))\n## No. of Perturbations replicates across plates equal to 2:\n##  3\ncat(\"No. of Perturbations replicates across plates less than 2:\\n\", length(data$perturbation_id[data$Freq&lt;2]))\n## No. of Perturbations replicates across plates less than 2:\n##  2\n\ndata %&gt;% ggplot(aes(Freq)) + \n  geom_bar(fill = custom_pal[seq_len(length(unique(data$Freq)))]) +\n  scale_y_log10() +\n  theme_clean() +\n  xlab(\"Number of replicates for perturbation per plate\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCertain perturbations has been represented on multiple plates while certain have lower replicates representation, which will affect differential expression statistics rigor.\n\n\n\n\nNTC placement across plates\nAfter going through all perturbations, it will be also useful to look at the spread of NTC across the plate. A good experiment should have a randomly placed perturbations and controls across plates to avoid any biases.\n\n123\n\n\nAll NTCs are present at the same location across all plates\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`1`$siRNA_plate_id) %&gt;% \n  mutate(isNTC = perturbation_id %in% \"NTC\") %&gt;% \n  group_by(well) %&gt;% \n  summarise(Freq = sum(isNTC)) %&gt;% \n  select(well, Freq) %&gt;% \n  as.data.frame()\n\nplotPlate(data, \"Freq\") + theme(axis.line = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nAll NTCs are present at the same location across all plates and replicates\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  mutate(isNTC = perturbation_id %in% \"NTC\") %&gt;% \n  group_by(well) %&gt;% \n  summarise(Freq = sum(isNTC)) %&gt;% \n  select(well, Freq) %&gt;% \n  as.data.frame()\n\nplotPlate(data, \"Freq\") + theme(axis.line = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nAll NTCs are present at the same location across all plates\n\n\nCode\ndata = metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  mutate(isNTC = perturbation_id %in% \"NTC\") %&gt;% \n  group_by(well) %&gt;% \n  summarise(Freq = sum(isNTC)) %&gt;% \n  select(well, Freq) %&gt;% \n  as.data.frame()\n\nplotPlate(data, \"Freq\") + theme(axis.line = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHaving all NTC placed at the same exact well position would mean that the effect from well specific expressional changes would be colinear with NTC and will confound the model. Random positioning of NTC across various plates would be able to better capture the well position specific randomness from the system."
  },
  {
    "objectID": "index.html#compulsory-task-1-perturbation-atlases-analysis",
    "href": "index.html#compulsory-task-1-perturbation-atlases-analysis",
    "title": "Computational Tasks for Principal Computational Scientist",
    "section": "Compulsory Task 1: Perturbation Atlases analysis",
    "text": "Compulsory Task 1: Perturbation Atlases analysis\n\nObjective:\nYou will be provided with a Perturbation Atlas dataset consisting of read counts and associated metadata from an RNAi screen. The dataset has been processed to anonymise gene identifiers, except for 10 highly expressed genes. Similarly, perturbation identifiers have been anonymised, with negative controls marked in the metadata. Your task is to analyse this dataset, focusing on assessing the technical performance of the experiment, proposing corrections for identified issues, and exploring biological insights.\n\n\nDataset:\nPlease find the dataset in the OchreBio_Perturbation_atlas folder.\n\n\nAsks:\n\nIdentify and discuss at least three technical concerns present within the experimental data using visualisations. What do these concerns suggest about the quality of the data?\nPropose methods to address the identified technical concerns, discussing the advantages and disadvantages of each approach. Reflect on how the experimental design could have been improved to mitigate these issues from the outset.\nBased on the expression levels of the 10 highly expressed genes, provide evidence supporting the identification of the possible cell type used in the RNAi screen. Describe common methodologies for analysing how perturbations may have altered cellular pathways.\nDiscuss the different types of genetic screens, including but not limited to RNAi screens. What are the strengths and weaknesses of each type? How do these methods compare in terms of their applicability to different research questions?\n\n\n\nPresentation format:\nA Jupyter notebook/R markdown that includes code, plots, speaking clearly to the above"
  },
  {
    "objectID": "index.html#compulsory-task-2-data-integration",
    "href": "index.html#compulsory-task-2-data-integration",
    "title": "Computational Tasks for Principal Computational Scientist",
    "section": "Compulsory Task 2: Data integration",
    "text": "Compulsory Task 2: Data integration\nBringing causality (and actionability) earlier into drug discovery is key for chronic disease R&D. Human population genetics has helped, but genetics struggles with sensitivity and it doesn’t provide biology. Even if a variant has a clear gene association, this does not provide information on cell type or at what stage in a multi-decade disease trajectory the gene is relevant. Most crucially, genetics doesn’t guarantee reversibility. I.e. that the gene is also a good target for reversing disease. Genetic screens can help address these issues, however genetic screens are often run in over-simplistic models to achieve scale at the loss of appropriate complexity. Genetic screens also only provide simple readouts, such as RNAseq or assays, that aren’t directly connected to the clinical disease endpoints.\nKnowing the types of data that Ochre generates in cells, tissues, and livers*, share your vision for how to run a screen to predict which genes in hepatocytes drive cirrhosis. Present this in sufficient detail:\n\nTo demonstrate your understanding of biology, technologies, and statistical/ML approaches.\nTo appeal to a mixed audience of computational and experimental biologists.\nTo help us understand statistical/ML innovations you’re applying, beyond what’s out there."
  },
  {
    "objectID": "compulsoryTask1/QC_counts/index.html#introduction",
    "href": "compulsoryTask1/QC_counts/index.html#introduction",
    "title": "QC of counts data",
    "section": "Introduction",
    "text": "Introduction\nNow, having a good understanding of the metadata we can perform QC on counts data. We will separate replicate group 2 and 3 as separate datasets and handle them individually.\nWe will read in both counts and metadata files to evaluate them separately.\n\n\nCode\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(kableExtra)\nlibrary(DESeq2)\nlibrary(genefilter)\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n\nallCounts = read_parquet(file.path(inputs.dir, 'counts.parquet'))\nmetadata = read_csv(file.path(inputs.dir, 'metadata.csv'), col_names = TRUE) %&gt;% \n  separate(cell_plate_id, into = c(\"cell_plate_id\", \"repl\"), sep = \"_rep\")\n\n# Get replicate data\nrepl_data = metadata %&gt;% \n  select(siRNA_plate_id, repl) %&gt;% \n  unique() %&gt;% \n  group_by(siRNA_plate_id) %&gt;% \n  summarise(Freq = n(), .groups = \"drop\") %&gt;% \n  group_nest(Freq) %&gt;% \n  deframe()\n\n\n\nGroup with Replicates: 2\nWe will reduce counts and metadata to only plates with 2 replicates\n\n\nCode\ncounts_2 &lt;- allCounts %&gt;% \n  column_to_rownames(\"gene_id\") %&gt;% \n  select(starts_with(repl_data$`2`$siRNA_plate_id)) %&gt;% \n  select(!ends_with(\"rep3\"))\n\nmetadata_2 &lt;- metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`2`$siRNA_plate_id) %&gt;% \n  select(sample_id : scientist_id) %&gt;% \n  column_to_rownames(\"sample_id\")\n\n# Make sure all colData are represented as factors\nmetadata_2 &lt;- metadata_2 %&gt;% mutate(across(everything(), factor))\nmetadata_2$perturbation_id &lt;- relevel(metadata_2$perturbation_id, ref = 'NTC')\n# # Check if all the samples match in order\n# all(rownames(metadata_2) == colnames(counts_2))\n\n\n\n\nCode\ngc()\ndds_2 &lt;- DESeqDataSetFromMatrix(\n  countData = counts_2,\n  colData = metadata_2,\n  design = ~ perturbation_id\n)\n\n# Pre-filter data\nind &lt;- rowSums(counts(dds_2)&gt;=10) &gt;= 3\ndds_2 &lt;- dds_2[ind,]\n\n# Normalize and standardize data\nvsd_2 &lt;- vst(dds_2, blind = TRUE)\ndds_2 &lt;- estimateSizeFactors(dds_2)\n\nsaveRDS(dds_2, file = file.path(robj.dir, \"dds_2.rds\"))\nsaveRDS(vsd_2, file = file.path(robj.dir, \"vsd_2.rds\"))\n\nrm(counts_2)\nrm(metadata_2)\ngc()\n\n\n\nPCA scatterplot evaluations\n\nperturbation_idwellcell_plate_idreplsiRNA_plate_iddatecell_donor_idsequencing_batch_idscientist_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere seems to be a gradual shift in distribution attributed to following variables:\n\ncell_plate_id\nsiRNA_plate_id\ndate\nsequencing_batch_id\n\nThese can be corrected towards differential gene expression prediction by setting correct model including these variables. However it is necessary to note that subset of these variables might require nesting within others to accurately address effects of each covariates\n\n\n\n\nHeatmap for sample distance evaluations\n\n\nCode\n\nmeta_ids &lt;- c(\"repl\", \"date\", \"cell_donor_id\", \"sequencing_batch_id\", \"scientist_id\" )\n\ntopVarGenes &lt;- head(order(rowVars(assay(vsd_2)), decreasing = TRUE), 50)\nmat  &lt;- assay(vsd_2)[ topVarGenes, ]\nmat  &lt;- mat - rowMeans(mat)\nanno &lt;- as.data.frame(colData(vsd_2)[, meta_ids])\n\npheatmap(mat, annotation_col = anno, width = 10, height = 30, show_colnames = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nGroup with Replicates: 3\nWe will reduce counts and metadata to only plates with 2 replicates, and not use exp1_Plate_1 & exp2_Plate_1 because of the ambiguity with replicate 3.\n\n\nCode\ncounts_3 &lt;- allCounts %&gt;% \n  column_to_rownames(\"gene_id\") %&gt;% \n  select(starts_with(repl_data$`3`$siRNA_plate_id)) %&gt;% \n  select(!starts_with(\"exp\"))\n\nmetadata_3 &lt;- metadata %&gt;% \n  filter(siRNA_plate_id %in% repl_data$`3`$siRNA_plate_id) %&gt;% \n  filter(!grepl(\"^exp*\", siRNA_plate_id)) %&gt;% \n  select(sample_id : scientist_id) %&gt;% \n  column_to_rownames(\"sample_id\")\n\n# Make sure all colData are represented as factors\nmetadata_3 &lt;- metadata_3 %&gt;% mutate(across(everything(), factor))\nmetadata_3$perturbation_id &lt;- relevel(metadata_3$perturbation_id, ref = 'NTC')\nmetadata_3 &lt;- metadata_3[colnames(counts_3),]\n\n# # Check if all the samples match in order\n# all(rownames(metadata_3) == colnames(counts_3))\n\n\n\n\nCode\ngc()\ndds_3 &lt;- DESeqDataSetFromMatrix(\n  countData = counts_3,\n  colData = metadata_3,\n  design = ~ perturbation_id\n)\n\n# Pre-filter data\nind &lt;- rowSums(counts(dds_3)&gt;=10) &gt;= 3\ndds_3 &lt;- dds_3[ind,]\n\n# Normalize and standardize data\nvsd_3 &lt;- vst(dds_3, blind = TRUE)\ndds_3 &lt;- estimateSizeFactors(dds_3)\n\nsaveRDS(dds_3, file = file.path(robj.dir, \"dds_3.rds\"))\nsaveRDS(vsd_3, file = file.path(robj.dir, \"vsd_3.rds\"))\n\nrm(counts_3)\nrm(metadata_3)\ngc()\n\n\n\nPCA scatterplot evaluations\n\nperturbation_idwellcell_plate_idreplsiRNA_plate_iddatecell_donor_idsequencing_batch_idscientist_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe samples seem to cluster separately based upon:\n\ncell_plate_id\nsiRNA_plate_id\nsequencing_batch_id\n\nHowever, cell_plate_id/siRNA_plate_id and sequencing_batch_id seem to be colinearly dependent model variables. It would have been nice to use single batch or distribute the replicates across batch rather than plates.\n\n\n\n\nHeatmap for sample distance evaluations\n\n\nCode\n\nmeta_ids &lt;- c(\"cell_plate_id\", \"repl\", \"siRNA_plate_id\", \"date\", \"cell_donor_id\", \"sequencing_batch_id\", \"scientist_id\" )\n\n\ntopVarGenes &lt;- head(order(rowVars(assay(vsd_3)), decreasing = TRUE), 50)\nmat  &lt;- assay(vsd_3)[ topVarGenes, ]\nmat  &lt;- mat - rowMeans(mat)\nanno &lt;- as.data.frame(colData(vsd_3)[, meta_ids])\n\npheatmap(mat, annotation_col = anno, width = 10, height = 30, show_colnames = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nCell type annotations\nTypically cell annotation can be achieved by using differential gene based statistics to drive cell annotations or using list of marker genes per sample group to identify.\nThere are other regression based methods too, such as CIBERSOTx.\nHere, we will select the 10 genes whose gene symbol is available in the data to identify cell types. We will use database based manual annotation tools listed on 10X website knowledgebase.\nHere, the following list of genes from the dataset are uploaded to CellMarker 2.0 to generate score map of cell types based on these marker genes.\n\n\nCode\nallCounts %&gt;%\n  filter(!grepl(\"geneID\", gene_id)) %&gt;%\n  pull(gene_id) %&gt;% paste(collapse = \", \")\n\n[1] “MGST1, FTL, MT2A, ALDOB, APOA2, ALB, FTH1, FGG, FGA, FGB”\n\nThe heatmap shows which cell type markers the input gene appears in and these cell type scores. The score is calculated according to the following formula.\nCell Type Score(i) = A/B\nWhere A represents the intersection number of input genes with marker genes in cell type(i), and B represents the total number of markers in cell type(i). Cell Type Score(i) can reflect the proportion of input genes in cell type(i).\n\nHowever, using PangloaDB the tp ranking inferred cell types are listed as follows.\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nGene\nSampled tissue\nStudy/sample identifier\nCluster index\nInferred cell type\nRank\n\n\n\n\nHomo_sapiens\nALB\nSRA716608_SRS3391630\n5\nLiver\nHepatocytes\n3\n\n\nHomo_sapiens\nALDOB\nSRA716608_SRS3391632\n8\nLiver\nHepatocytes\n89\n\n\nHomo_sapiens\nAPOA2\nSRA608611_SRS2517316\n1\nLung progenitors\nHepatocytes\n3\n\n\nHomo_sapiens\nFGA\nSRA716608_SRS3391631\n1\nLiver\nHepatocytes\n14\n\n\nHomo_sapiens\nFGB\nSRA716608_SRS3391629\n10\nLiver\nHepatocytes\n16\n\n\nHomo_sapiens\nFGG\nSRA716608_SRS3391630\n8\nLiver\nHepatocytes\n19\n\n\nHomo_sapiens\nFTH1\nSRA878024_SRS4660847\n2\nLungs\nMonocytes\n16\n\n\nHomo_sapiens\nFTL\nSRA608611_SRS2517316\n1\nLung progenitors\nHepatocytes\n1\n\n\nHomo_sapiens\nMGST1\nSRA716608_SRS3391630\n8\nLiver\nHepatocytes\n27\n\n\nHomo_sapiens\nMT2A\nSRA691388_SRS3173556\n9\nBreast epithelium\nBasal cells\n1"
  },
  {
    "objectID": "compulsoryTask1/index.html",
    "href": "compulsoryTask1/index.html",
    "title": "Perturbation Atlases analysis",
    "section": "",
    "text": "We will perform individual qc analysis for metadata and counts data. The summarised answers from both these analysis along with individual analysis can be found in sub pages on the left sidebar navigation."
  }
]